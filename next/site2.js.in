// Production steps of ECMA-262, Edition 5, 15.4.4.18
// Reference: http://es5.github.com/#x15.4.4.18
if ( !Array.prototype.forEach ) {
    Array.prototype.forEach = function( callback, thisArg ) {

	var T, k;

	if ( this == null ) {
		throw new TypeError( " this is null or not defined" );
	}

	// 1. Let O be the result of calling ToObject passing the |this| value as the argument.
	var O = Object(this);

	// 2. Let lenValue be the result of calling the Get internal method of O with the argument "length".
	// 3. Let len be ToUint32(lenValue).
	var len = O.length >>> 0; // Hack to convert O.length to a UInt32

	// 4. If IsCallable(callback) is false, throw a TypeError exception.
	// See: http://es5.github.com/#x9.11
	if ( {}.toString.call(callback) != "[object Function]" ) {
		throw new TypeError( callback + " is not a function" );
	}

	// 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
	if ( thisArg ) {
		T = thisArg;
	}

	// 6. Let k be 0
	k = 0;

	// 7. Repeat, while k < len
	while( k < len ) {

		var kValue;

		// a. Let Pk be ToString(k).
		//	 This is implicit for LHS operands of the in operator
		// b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.
		//	 This step can be combined with c
		// c. If kPresent is true, then
		if ( k in O ) {

			// i. Let kValue be the result of calling the Get internal method of O with argument Pk.
			kValue = O[ k ];

			// ii. Call the Call internal method of callback with T as the this value and
			// argument list containing kValue, k, and O.
			callback.call( T, kValue, k, O );
		}
		// d. Increase k by 1.
		k++;
	}
	// 8. return undefined
    };
}

/* The rest of this code is from Darrick. */
function crib_toggle(id)
{
	var x = document.getElementById(id);
	var y = document.getElementById(id + "_ctl");
	if (x.style.display == "") {
		/* work around a bug in ie6/7. */
		try {
			x.style.display = "table-row";
		} catch(e) {
			x.style.display = "block";
		}
		y.innerHTML = "&#9660;";
	} else {
		x.style.display = "";
		y.innerHTML = "&#9654;";
	}
}

function addEventHandler(node, eventName, lambda)
{
	var cookie = {node: node, event: eventName, func: lambda};
	if (node.addEventListener)
		node.addEventListener(eventName, lambda, false);
	else if (node.attachEvent)
		node.attachEvent("on" + eventName, lambda);
	return cookie;
}
function addWindowEventHandler(eventName, lambda)
{
	return addEventHandler(window, eventName, lambda);
}
function getIEVersion() {
	var rv = -1; // Return value assumes failure.

	if (navigator.appName == 'Microsoft Internet Explorer') {
		var ua = navigator.userAgent;
		var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
		if (re.exec(ua) != null)
			rv = parseFloat(RegExp.$1);
	}

    return rv;
}
function getSlides()
{
	/* shiny new html5 thing */
	if (document.getElementsByClassName) {
		return document.getElementsByClassName("slide");
	}

	var res = Array();
	/* use xpath */
	if (document.evaluate) {
		var node = null;
		var nodes = document.evaluate("//*[@class = 'slide']", document, null, 0, null);
		while ((node = nodes.iterateNext())) {
			res.push(node);
		}
		return res;
	}

	/* shitty slow way for ie */
	var nodes = document.getElementsByTagName("*");
	for (var l = 0; l < nodes.length; l++) {
		if (nodes[l].className == 'slide') {
			res.push(nodes[l]);
		}
	}
	return res;
}

function Slider(element, classname, displayStyle, interval)
{
	children = element.children;

	this.element = element;
	this.current = -1;
	this.layers = new Array();
	this.displayStyle = displayStyle;
	this.interval = interval;
	this.autoNext = null;

	for (l = 0; l < children.length; l++) {
		if (children[l].className == classname) {
			this.layers.push(children[l]);
		}
	}

	for (l = 0; l < this.layers.length; l++) {
		if (this.current < 0 && this.layers[l].style.display == this.displayStyle) {
			this.current = l;
		}
	}

	if (this.current < 0) {
		this.current = 0;
		this.layers[0].style.display = this.displayStyle;
	}

	/* Stupid hack: IE8 and below can't handle our nice Unicode. */
	var useUnicode = true;
	var ie = getIEVersion();
	if (ie >= 0 && ie <= 8.0)
		useUnicode = false;

	var that = this;
	var prevBtn = document.createElement("a");
	prevBtn.className = "ss_previous ss_nav";
	prevBtn.innerHTML = "&#9664;";
	if (!useUnicode)
		prevBtn.innerHTML = "&lt;";
	prevBtn.onclick = function() {that.previous();};
	this.element.appendChild(prevBtn);

	var nextBtn = document.createElement("a");
	nextBtn.className = "ss_next ss_nav";
	nextBtn.innerHTML = "&#9654;";
	if (!useUnicode)
		nextBtn.innerHTML = "&gt;";
	nextBtn.onclick = function() {that.next();};
	this.element.appendChild(nextBtn);

	if (this.interval)
		this.autoNext = setInterval(function() {that._next();}, this.interval);
}

Slider.prototype._next = function()
{
	c = this.current + 1;
	if (c >= this.layers.length)
		c = 0;
	this.slideTo(c);
}

Slider.prototype.next = function()
{
	this._next();
	if (this.autoNext)
		clearInterval(this.autoNext);
	if (this.interval) {
		var that = this;
		this.autoNext = setInterval(function() {that._next();}, this.interval);
	}
}

Slider.prototype.previous = function()
{
	c = this.current - 1;
	if (c < 0)
		c = this.layers.length - 1;
	this.slideTo(c);
	if (this.autoNext)
		clearInterval(this.autoNext);
	if (this.interval) {
		var that = this;
		this.autoNext = setInterval(function() {that._next();}, this.interval);
	}
}

Slider.prototype.slideTo = function(c)
{
	var that = this;
	this.layers[c].style.display = this.displayStyle;
	this.layers[this.current].style.display = "none";
	this.current = c;
}

function resizer()
{
	var win_width;
	if (typeof(window.innerWidth) != "undefined")
		win_width = window.innerWidth;
	else if (typeof(document.documentElement.offsetWidth) != "undefined")
		win_width = document.documentElement.offsetWidth;
	else if (typeof(document.body.offsetWidth) != "undefined")
		win_width = document.body.offsetWidth;

	var height = Math.floor(win_width / 1.82);
	if (height > 577)
		height = 577;
	var slides = getSlides();
	Array.prototype.forEach.call(slides, function(s) {s.style.height = height + "px";});
	
}
function createSlides(element)
{
	%SLIDE_DATA%

	for (var l = 0; l < slides.length - 1; l++) {
		var img = document.createElement("img");
		img.src = slides[l].img;
		img.style.width = "1px";
		img.style.height = "1px";
		document.getElementById("pictures").appendChild(img);

		var slideDiv = document.createElement("div");
		slideDiv.className = "slide";
		imgurl = "url('" + slides[l].img + "')";
		slideDiv.style.backgroundImage = imgurl;

		if (slides[l].url.length > 0) {
			var linkSpan = document.createElement("span");
			linkSpan.appendChild(document.createTextNode("More"));

			var captionLink = document.createElement("a");
			captionLink.className = "slide_caption";
			captionLink.href = slides[l].url;
			captionLink.appendChild(document.createTextNode(slides[l].caption + " ["));
			captionLink.appendChild(linkSpan);
			captionLink.appendChild(document.createTextNode("]"));
			slideDiv.appendChild(captionLink);
		} else {
			var caption = document.createElement("span");
			caption.className = "slide_caption";
			caption.appendChild(document.createTextNode(slides[l].caption));
			slideDiv.appendChild(caption);
		}

		var itemDiv = document.createElement("div");
		itemDiv.className = "ss_item";

		itemDiv.appendChild(slideDiv);
		element.appendChild(itemDiv);
	}
}

function slideshow_key(evt, slider) {
	if (evt.keyCode == 39) {
		/* right arrow */
		slider.next();
		return true;
	} else if (evt.keyCode == 37) {
		/* left arrow */
		slider.previous();
		return true;
	}
	return false;
}

var slider = null;
function load_main() {
	createSlides(document.getElementById("ss_cont"));
	resizer();
	slider = new Slider(document.getElementById("ss_cont"), "ss_item", "block", 30000);
	addEventHandler(window, "resize", resizer);
	addEventHandler(window, "keypress", function(evt) {slideshow_key(evt, slider);});
}
